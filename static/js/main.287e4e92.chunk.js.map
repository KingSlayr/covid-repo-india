{"version":3,"sources":["util.js","Chart.js","Map.js","StatBox.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["indian_states_code","color","confirmed","bgColor","borderColor","multiplier","recovered","deceased","Chart","type","stateCurrent","labels","dataState","useState","chartData","setChartData","useEffect","a","fetch","then","res","json","data","getChartData","Object","keys","forEach","state","dates","date","push","prevDayCases","total","datasets","label","options","scales","yAxes","ticks","beginAtZero","elements","line","borderWidth","fill","backgroundColor","tension","point","radius","hoverRadius","plugins","tooltip","enabled","className","Map","stateData","center","setcenter","map","setmap","zoom","setzoom","presentMap","setPresentMap","mapDataStates","setView","fillBlueOptions","fillColor","fillOpacity","opacity","weight","geoJsonStyle","dashArray","clicked","e","l","ourCenter","centerOfMass","geometry","coordinates","x","console","log","onEachState","layer","bindTooltip","properties","HASC_1","slice","pane","on","event","target","setStyle","ourCircles","length","features","Circle","pathOptions","Math","sqrt","MapContainer","scrollWheelZoom","whenCreated","LayerGroup","GeoJSON","style","onEachFeature","StatBox","setType","appType","totalCases","cases","caseType","onClick","Card","CardContent","CircularProgress","Table","setState","typeName","setTypeName","sort","b","key","Button","active","numeral","format","App","setStateData","getStatesData","FormControl","Select","value","onChange","MenuItem","delta7","vaccinated","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.287e4e92.chunk.js","sourcesContent":["export const indian_states_code = {\r\n    \"AN\":\"Andaman and Nicobar Islands\",\r\n    \"AP\":\"Andhra Pradesh\",\r\n    \"AR\":\"Arunachal Pradesh\",\r\n    \"AS\":\"Assam\",\r\n    \"BR\":\"Bihar\",\r\n    \"CT\":\"Chandigarh\",\r\n    \"CH\":\"Chhattisgarh\",\r\n    \"DN\":\"Dadra and Nagar Haveli\",\r\n    \"DD\":\"Daman and Diu\",\r\n    \"DL\":\"Delhi\",\r\n    \"GA\":\"Goa\",\r\n    \"GJ\":\"Gujarat\",\r\n    \"HR\":\"Haryana\",\r\n    \"HP\":\"Himachal Pradesh\",\r\n    \"JK\":\"Jammu and Kashmir\",\r\n    \"JH\":\"Jharkhand\",\r\n    \"KA\":\"Karnataka\",\r\n    \"KL\":\"Kerala\",\r\n    \"LA\":\"Ladakh\",\r\n    \"LD\":\"Lakshadweep\",\r\n    \"MP\":\"Madhya Pradesh\",\r\n    \"MH\":\"Maharashtra\",\r\n    \"MN\":\"Manipur\",\r\n    \"ML\":\"Meghalaya\",\r\n    \"MZ\":\"Mizoram\",\r\n    \"NL\":\"Nagaland\",\r\n    \"OR\":\"Odisha\",\r\n    \"PY\":\"Puducherry\",\r\n    \"PB\":\"Punjab\",\r\n    \"RJ\":\"Rajasthan\",\r\n    \"SK\":\"Sikkim\",\r\n    \"TN\":\"Tamil Nadu\",\r\n    \"TG\":\"Telangana\",\r\n    \"TR\":\"Tripura\",\r\n    \"UP\":\"Uttar Pradesh\",\r\n    \"UT\":\"Uttarakhand\",\r\n    \"WB\":\"West Bengal\",\r\n    \"TT\":\"India\"\r\n  }\r\n\r\n  export const color = {\r\n    confirmed:{\r\n      bgColor:'rgb(0, 0, 255)',\r\n      borderColor:'rgba(0, 0, 255, 0.5)',\r\n      multiplier:250\r\n    },\r\n    recovered:{\r\n      bgColor:'rgb(0, 255, 0)',\r\n      borderColor:'rgba(0, 255, 0, 0.5)',\r\n      multiplier:150\r\n    },\r\n    deceased:{\r\n      bgColor:'rgb(92, 48, 78)',\r\n      borderColor:'rgba(92, 48, 78, 0.5)',\r\n      multiplier:150\r\n    }\r\n  }","import React, { useEffect, useState } from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\nimport './Chart.css'\r\nimport { color,indian_states_code } from './util'\r\n\r\n\r\nexport default function Chart({type,stateCurrent}) {\r\n\r\n    const labels=[]\r\n    const dataState=[]\r\n    const [chartData, setChartData] = useState([])\r\n\r\n    useEffect(() => {\r\n        const getChartData = async () => {\r\n            await fetch('https://api.covid19india.org/v4/min/timeseries.min.json')\r\n            .then((res)=>res.json())\r\n            .then(data=>setChartData(data))\r\n        }\r\n        getChartData()\r\n    }, [])\r\n\r\n    Object.keys(chartData).forEach(state=>{\r\n        if(state===stateCurrent){\r\n            Object.keys(chartData[state]?.dates).forEach(date=>labels.push(date))\r\n            let prevDayCases = 0\r\n            Object.keys(chartData[state]?.dates).forEach(date=>{\r\n                dataState.push(chartData[state]?.dates[date].total[type]-prevDayCases)\r\n                prevDayCases=chartData[state]?.dates[date].total[type]\r\n            })\r\n        }\r\n    })\r\n\r\n    // console.log('labels',labels,'Data',dataState);\r\n    const data = {\r\n        labels: labels,\r\n        datasets: [\r\n        {\r\n            label: `${type} per day in ${indian_states_code[stateCurrent]}`,\r\n            data: dataState,\r\n        },\r\n        ],\r\n    };\r\n    \r\n    const options = {\r\n        scales: {\r\n        yAxes: [\r\n            {\r\n            ticks: {\r\n                beginAtZero: true,\r\n            },\r\n            },\r\n        ],\r\n        },\r\n        elements:{\r\n            line:{\r\n                borderWidth:0.7,\r\n                fill: false,\r\n                backgroundColor: color[type]?.bgColor,\r\n                borderColor: color[type]?.borderColor,\r\n                tension:1,\r\n            },\r\n            point:{            \r\n                radius:0.3,\r\n                hoverRadius:5,\r\n            }\r\n        },\r\n        plugins:{\r\n            tooltip:{\r\n                enabled:true,\r\n                backgroundColor:color[type]?.bgColor\r\n            },\r\n        },\r\n        // animations: {\r\n        //     tension: {\r\n        //       duration: 10,\r\n        //       easing: 'linear',\r\n        //       from: 1,\r\n        //       to: 0,\r\n        //       loop: true\r\n        //     }\r\n        //   },\r\n    };\r\n\r\n    return (\r\n        <div className='chart'>\r\n            <Line data={data} options={options} />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { MapContainer,GeoJSON, Circle, LayerGroup } from 'react-leaflet'\r\nimport './Map.css'\r\nimport mapDataStates from './mapData/india_states.json'\r\nimport { color, indian_states_code } from './util'\r\nimport { centerOfMass } from \"@turf/turf\";\r\n\r\nexport default function Map({type,stateData}) {\r\n\r\n    const [center, setcenter] = useState([22.5937, 77.7])\r\n    const [map, setmap] = useState(null)\r\n    const [zoom, setzoom] = useState(5)\r\n    const [presentMap, setPresentMap] = useState(null)\r\n\r\n    useEffect(() => {\r\n        setPresentMap(mapDataStates)\r\n    }, [])\r\n\r\n    if (map) {\r\n        map.setView(center,zoom);\r\n    }\r\n\r\n    const fillBlueOptions = { \r\n        fillColor: (type!=='deceased')?color[type]?.bgColor:'white',\r\n        color:(type!=='deceased')?color[type]?.bgColor:'white',\r\n        fillOpacity:0.08,\r\n        opacity:0.6,\r\n        weight:1 \r\n    }\r\n\r\n    const geoJsonStyle = {\r\n        fillColor:'black',\r\n        fillOpacity:0,\r\n        weight:1,\r\n        dashArray:5,\r\n        color:(type!=='deceased')?color[type]?.bgColor:'white'\r\n    }\r\n\r\n    const clicked = (e,l) => {\r\n        let ourCenter = centerOfMass(e)?.geometry.coordinates\r\n        let x = ourCenter[0]\r\n        ourCenter[0]=ourCenter[1]\r\n        ourCenter[1]=x\r\n        setcenter(ourCenter)\r\n        setzoom(7)\r\n        console.log('click');\r\n    }\r\n    \r\n    const onEachState = async (state,layer) => {\r\n\r\n        layer.bindTooltip(indian_states_code[(state?.properties.HASC_1).slice(3,5)])  \r\n        layer.options.pane='shadowPane'\r\n        console.log(indian_states_code[(state?.properties.HASC_1).slice(3,5)]);\r\n        \r\n        layer.on(\r\n            'click',()=>{\r\n                clicked(state,layer)\r\n            }\r\n        )\r\n        layer.on(\r\n            'mouseover',(event)=>{\r\n                event.target.setStyle({\r\n                    fillColor:`${(type!=='deceased')?color[type]?.bgColor:'white'}`,\r\n                    fillOpacity:0.3\r\n                })\r\n            }\r\n        )\r\n        layer.on(\r\n            'mouseout',(event)=>{\r\n                event.target.setStyle({\r\n                    fillColor:'black',\r\n                    fillOpacity:0\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    let ourCircles={}\r\n\r\n    if(Object.keys(stateData).length!==0){\r\n        ourCircles = presentMap?.features.map((state)=>{\r\n             let ourCenter = centerOfMass(state)?.geometry.coordinates\r\n             let x = ourCenter[0]\r\n             ourCenter[0]=ourCenter[1]\r\n             ourCenter[1]=x\r\n\r\n\r\n\r\n             const circle =  <Circle \r\n                center={ourCenter} \r\n                pathOptions={fillBlueOptions} \r\n                radius={\r\n                    // stateData[(state?.properties.HASC_1).slice(3,5)]?.delta7[type]||0\r\n                    Math.sqrt(stateData[(state?.properties.HASC_1).slice(3,5)]?.total[type])*color[type]?.multiplier||0\r\n                    } ></Circle>\r\n            return circle\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='map'>\r\n            <MapContainer  center={center} zoom={zoom} scrollWheelZoom={true} whenCreated={setmap}>\r\n                {/* <Pane style={{zIndex:1}}> */}\r\n                    <LayerGroup>\r\n                        {Object.keys(ourCircles).length && ourCircles}\r\n                    </LayerGroup>\r\n                {/* </Pane> */}\r\n                {/* <Pane style={{zIndex:2}}> */}\r\n                {(Object.keys(stateData).length!==0)&&<GeoJSON style={geoJsonStyle} data={presentMap?.features} onEachFeature={(e,l)=>onEachState(e,l)}/>}\r\n                {/* </Pane> */}\r\n                {/* <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                ></TileLayer> */}\r\n            </MapContainer>\r\n        </div>\r\n    )\r\n}\r\n","import { Card, CardContent, CircularProgress } from '@material-ui/core'\r\nimport React from 'react'\r\nimport './StatBox.css'\r\nimport { color } from './util'\r\n\r\nexport default function StatBox({setType,appType,type,totalCases,cases}) {\r\n    let caseType = ''\r\n    switch(type){\r\n        case 'Total Cases':\r\n            caseType='confirmed'\r\n            break;\r\n        case 'Recovered':\r\n            caseType='recovered'\r\n            break;\r\n        case 'Death':\r\n            caseType='deceased'\r\n            break;\r\n        default :\r\n            break;\r\n    }\r\n    return (\r\n        <div className='card_stats' onClick={()=>setType(caseType)}>\r\n            <Card >\r\n                {(caseType===appType)&&<div style={{backgroundColor:`${color[caseType]?.bgColor}`}} className='statBox_active'></div>}\r\n                <CardContent>\r\n                    <div className='card_statsHeading'>\r\n                        {type}\r\n                    </div>\r\n                    <div className='card_statsToday'>\r\n                        {cases?cases:<CircularProgress />}\r\n                    </div>\r\n                    <div className='card_statsTotal'>\r\n                        {totalCases?totalCases:<CircularProgress />}\r\n                    </div>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import numeral from 'numeral';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { indian_states_code } from './util';\r\nimport './Table.css'\r\nimport { Button } from '@material-ui/core';\r\n\r\nexport default function Table({type,setType,setState,stateData}) {\r\n\r\n    const data = {}\r\n    const [typeName, setTypeName] = useState('Cases')\r\n\r\n    useEffect(() => {\r\n        switch(type){\r\n            case 'confirmed':\r\n                setTypeName('Cases')\r\n                break;\r\n            case 'recovered':\r\n                setTypeName('Recovered')\r\n                break;\r\n            case 'deceased':\r\n                setTypeName('Deaths')\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [type])\r\n\r\n    Object.keys(stateData).sort((a,b)=>{\r\n        if(stateData[a]?.total[type]>stateData[b]?.total[type]){\r\n            return -1\r\n        }else{\r\n            return 1\r\n        }\r\n    }).forEach((key)=> {\r\n        data[key] = stateData[key];\r\n      });\r\n\r\n    return (\r\n        <>\r\n            <div className='btns_table'>\r\n                <Button active onClick={()=>setType('confirmed')} color=\"primary\">Cases</Button>\r\n                <Button onClick={()=>setType('recovered')} color=\"secondary\">Recovered</Button>\r\n                <Button onClick={()=>setType('deceased')} color=\"primary\">Deaths</Button>\r\n            </div>\r\n            <div className='table'>\r\n                <tr>\r\n                    <th>State</th>\r\n                    <th>{typeName}</th>\r\n                </tr>\r\n                <tr onClick={()=>setState('TT')}>\r\n                    <td>India</td>\r\n                    <td>{numeral(stateData['TT']?.total[type]).format('0.0a')}</td>\r\n                </tr>\r\n                {\r\n                    Object.keys(data).map(state=>{\r\n                        if(state!=='TT'){\r\n                            return(\r\n                                <tr onClick={()=>setState(state)}>\r\n                                    <td>{indian_states_code[state]}</td>\r\n                                    <td>{numeral(data[state]?.total[type]).format('0.0a')}</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                        return null\r\n                    })\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { FormControl, MenuItem, Select } from '@material-ui/core';\nimport numeral from 'numeral';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Chart from './Chart';\nimport Map from './Map';\nimport StatBox from './StatBox';\nimport Table from './Table';\nimport { indian_states_code } from './util';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  const [state, setState] = useState('TT')\n  const [type, setType] = useState('confirmed')\n  const [stateData, setStateData] = useState({})\n\n  useEffect(() => {\n      const getStatesData = async () => {\n      await fetch('https://api.covid19india.org/v4/min/data.min.json')\n      .then((res)=>res.json())\n      .then(data=>(\n        setStateData(data)\n      ))\n    }\n    getStatesData()\n  }, [])\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_header\">\n        <h1>Covid Tracker</h1>\n        <FormControl>\n          <Select\n            value={state}\n            onChange={(e)=>setState(e.target.value)}\n          >\n            <MenuItem value='TT'>India</MenuItem>\n          {Object.keys(stateData).map((state)=>{\n              if(state!==\"TT\"){\n                return <MenuItem value={state}>{indian_states_code[state]}</MenuItem>\n              }\n              return 0\n            }\n          )}\n          </Select>\n        </FormControl>\n      </div>\n      <div className=\"body\">\n        <div className=\"app_left\">\n          <div className=\"app_statsBox\">\n            <StatBox \n              setType={setType}\n              appType={type}\n              type='Total Cases' \n              totalCases={numeral(stateData[state]?.total.confirmed).format('0.0a')} cases={numeral(stateData[state]?.delta7.confirmed).format('0 a')} />\n            <StatBox \n              setType={setType}\n              appType={type}\n              type='Recovered' \n              totalCases={numeral(stateData[state]?.total.recovered).format('0.0a')} \n              cases={numeral(stateData[state]?.delta7.recovered).format('0 a')} />\n            <StatBox \n              setType={setType}\n              appType={type}\n              type='Death' \n              totalCases={numeral(stateData[state]?.total.deceased).format('0.0a')} \n              cases={numeral(stateData[state]?.delta7.deceased).format('0 a')} />\n            <StatBox \n              setType={setType}\n              appType={type}\n              type='Vaccinated' \n              totalCases={numeral(stateData[state]?.total.vaccinated).format('0.0a')} \n              cases={numeral(stateData[state]?.delta7.vaccinated).format('0 a')} />\n          </div>\n          <div className=\"app_map\"><Map type={type} stateData={stateData}/></div>\n          {/* <Chart type={type} stateData={stateData} stateCurrent={state}/> */}\n        </div>\n        <div className=\"app_right\">\n          <div className=\"app_table\">\n            <Table type={type} setType={setType} setState={setState} stateData={stateData}/>\n          </div>\n          <div className=\"app_chart\">\n            <Chart type={type} stateData={stateData} stateCurrent={state}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}